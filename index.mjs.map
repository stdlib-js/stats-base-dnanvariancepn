{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dnanvariancepn.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnannsumpw } from '@stdlib/blas-ext-base-dnannsumpw';\n\n\n// VARIABLES //\n\nvar WORKSPACE = [ 0.0, 0 ];\n\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array ignoring `NaN` values and using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnanvariancepn( 5, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction dnanvariancepn( N, correction, x, strideX, offsetX ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar nc;\n\tvar M;\n\tvar d;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = x[ offsetX ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\t// Compute an estimate for the mean...\n\tWORKSPACE[ 0 ] = 0.0;\n\tWORKSPACE[ 1 ] = 0;\n\tdnannsumpw( N, x, strideX, offsetX, WORKSPACE, 1, 0 );\n\tn = WORKSPACE[ 1 ];\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tmu = WORKSPACE[ 0 ] / n;\n\n\t// Compute the variance...\n\tix = offsetX;\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\td = v - mu;\n\t\t\tM2 += d * d;\n\t\t\tM += d;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn (M2/nc) - ((M/n)*(M/nc));\n}\n\n\n// EXPORTS //\n\nexport default dnanvariancepn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array ignoring `NaN` values and using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} variance\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnanvariancepn( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction dnanvariancepn( N, correction, x, strideX ) {\n\treturn ndarray( N, correction, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnanvariancepn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dnanvariancepn from './dnanvariancepn.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanvariancepn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanvariancepn;\n"],"names":["WORKSPACE","dnanvariancepn","N","correction","x","strideX","offsetX","mu","ix","M2","nc","M","d","v","n","i","NaN","dnannsumpw","ndarray","stride2offset","setReadOnly"],"mappings":";;2UA2BA,IAAIA,EAAY,CAAE,EAAK,GAgCvB,SAASC,EAAgBC,EAAGC,EAAYC,EAAGC,EAASC,GACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKb,GAAK,EACT,OAAOc,IAER,GAAW,IAANd,GAAuB,IAAZG,EAEf,OADAQ,EAAIT,EAAGE,KACIO,GAAKX,EAAEC,EAAa,EACvB,EAEDa,IAQR,GALAhB,EAAW,GAAM,EACjBA,EAAW,GAAM,EACjBiB,EAAYf,EAAGE,EAAGC,EAASC,EAASN,EAAW,EAAG,IAElDU,GADAI,EAAId,EAAW,IACNG,IACE,EACV,OAAOa,IAQR,IANAT,EAAKP,EAAW,GAAMc,EAGtBN,EAAKF,EACLG,EAAK,EACLE,EAAI,EACEI,EAAI,EAAGA,EAAIb,EAAGa,KACnBF,EAAIT,EAAGI,KACIK,IAEVJ,IADAG,EAAIC,EAAIN,GACEK,EACVD,GAAKC,GAENJ,GAAMH,EAEP,OAAQI,EAAGC,EAAQC,EAAEG,GAAIH,EAAED,EAC5B,CCnDA,SAAST,EAAgBC,EAAGC,EAAYC,EAAGC,GAC1C,OAAOa,EAAShB,EAAGC,EAAYC,EAAGC,EAASc,EAAejB,EAAGG,GAC9D,CC3BAe,EAAAnB,EAAA,UAAAiB"}